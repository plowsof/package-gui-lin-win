on: 
  workflow_dispatch:
    inputs:
      guifile:
        description: 'run id'     
        required: true
        default: "2680356377"
      tag:
        description: 'Tag version'
        required: true
        default: "v0.18.0.0"
      remotedir:
        description: 'remote dir'
        required: true
        default: "/tmp"

jobs:
  packageWindows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2

    - name: Download docker-windows-static from Monero-GUI build.yml
      uses: dawidd6/action-download-artifact@v2.21.1
      with:
        workflow: build.yml
        workflow_conclusion: success
        run_id: ${{ github.event.inputs.guifile }}
        repo: monero-project/monero-gui
        name: docker-windows-static
        path: frombuild

    - name: "Verify Inno Setup file hashes"
      run: |
          #Known hashes ~ files installed from innosetup-6.2.1.exe
          $path_inno_files = "utils\"
          #wrong hash test
          if (-Not ((Get-FileHash $path_inno_files\Default.isl).hash -eq "179da3422d7bbb65bb2052f9c0b370ab66ddd6f24693d90accbd7d7d73d4f1a4")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\ISCC.exe).hash -eq "0d02e30a6ad432a50eb86f1ecf330147046e671de340bcb43a170fecbd19bf51")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\ISCmplr.dll).hash -eq "5ea9bb338795bffa33da5581e5fe1c976a561f6dc32105635dcd518fbb5a33b4")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\islzma.dll).hash -eq "0b2e19e473a47e10578b05a2f3b43ad96603f3ee1e397c06a280c3b7458a76e2")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\ISPPBuiltins.iss).hash -eq "a7c5a10f4aac60862082985cfdf8bc5e703fa7fb9cfff4e1deb1d9452862057f")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\Setup.e32).hash -eq "088622096c373250d04e46de5cda072a921a89900c57988bbe52f1e308e48043")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\SetupLdr.e32).hash -eq "86154d725c21660f220e957eb6dcaf73ca609eef486dcdce6d5d7c286abd03d5")){ Exit 1 }
          if (-Not ((Get-FileHash $path_inno_files\ISPP.dll).hash -eq "1be06b60090221d7a7d236d374ab4ff7e6a56013107f806be4bea2b79dad3703")){ Exit 1 }
          if (-Not ((Get-FileHash utils\opengl32sw.dll).hash -eq "963641a718f9cae2705d5299eae9b7444e84e72ab3bef96a691510dd05fa1da4")){ Exit 1 }
    
    - name: "Download + Extract CLI Files / PDF guide"
      run: |
          $TAG = "${{ github.event.inputs.tag }}"
          Invoke-WebRequest -Uri "https://gui.xmr.pm/files/cli/$($TAG)/monero-win-x64-$($TAG).zip" -OutFile "monero-win-x64-$($TAG).zip"
          Invoke-WebRequest -Uri "https://github.com/monero-ecosystem/monero-GUI-guide/releases/download/v1.9/monero-gui-wallet-guide.pdf" -OutFile "monero-gui-wallet-guide.pdf"
          Expand-Archive -Path monero-win-x64-$($TAG).zip -DestinationPath clifiles
          
    - name: "Create lowgfx bat file"
      run: |
          New-Item "start-low-graphics-mode.bat"
          $lowgfx = @"
          @echo off
          
          set QMLSCENE_DEVICE=softwarecontext
          
          start /b monero-wallet-gui.exe
          "@
          Set-Content "start-low-graphics-mode.bat" $lowgfx
          
    - name: "Prepare files for zipping"
      run: |
          $TAG = "${{ github.event.inputs.tag }}"
          mkdir -p dummy\monero-gui-$($TAG)\extras
          $HEAD = "clifiles\monero-x86_64-w64-mingw32-" + $TAG
          $OUT = "dummy\monero-gui-" + $TAG
          
          $license = "$($HEAD)\LICENSE"
          $monerod = "$($HEAD)\monerod.exe"
          Move-Item -Path $license -Destination $OUT
          Move-Item -Path $monerod -Destination $OUT
          $readme = $HEAD + "\README.md"; rm $readme
          $anon = $HEAD + "\ANONYMITY_NETWORKS.md"; rm $anon

          
          $dest = "dummy\monero-gui-" + $TAG 
          Move-Item -Path monero-gui-wallet-guide.pdf -Destination $dest
          Move-Item -Path frombuild\monero-wallet-gui.exe -Destination $dest
          Move-Item -Path utils\opengl32sw.dll -Destination $dest
          Move-Item -path start-low-graphics-mode.bat -Destination $dest
          
          Get-ChildItem -Path "$($HEAD)\*" -Recurse | Move-Item -Destination "dummy\monero-gui-$($TAG)\extras"

    - name: "Clone installer folder from Monero-GUI repo"
      run: |
          $dest = "dummy\monero-gui-" + "${{ github.event.inputs.tag }}"
          mkdir inno; cd inno
          git init
          git remote add -f origin https://github.com/monero-project/monero-gui
          git sparse-checkout init
          git sparse-checkout set "installers\windows"
          git pull origin master
          mkdir installers\windows\bin; cd ..
          Copy-Item -Path "$($dest)\*" -Destination "inno\installers\windows\bin" -Recurse
          
    - name: "Add version to Monero.iss file"
      run: |
          $TAG = "${{ github.event.inputs.tag }}"
          $file = 'inno\installers\windows\Monero.iss'
          $strip_v = $TAG.substring(1,$TAG.length - 1)
          $content = Get-Content $file
          $new_str = '#define GuiVersion "' + $strip_v + '"'
          $content[3] = $new_str
          $content | Set-Content $file
  
    - name: "Move InnoSetup files to installer dir"
      run: Copy-Item -Path "utils\*" -Destination "inno\installers\windows" -Recurse

    - name: "Create monero-gui-install-win-x64-${{ github.event.inputs.tag }}.exe"
      run: |
          $inno_cc = "ISCC.exe"
          $HOMEDIR = Get-Location
          mkdir uploadme

          cd inno\installers\windows
          .\ISCC.exe Monero.iss
          $out = $HOMEDIR.tostring() + "\uploadme\monero-gui-install-win-x64-${{ github.event.inputs.tag }}.exe"
          Move-Item -Path Output\mysetup.exe -Destination $out
          cd $HOMEDIR.tostring()
  
    - name: "Create monero-gui-win-x64-${{ github.event.inputs.tag }}.zip"
      run: Compress-Archive -Path .\dummy\* -DestinationPath uploadme\monero-gui-win-x64-${{ github.event.inputs.tag }}.zip
    
    - name: "Upload files using SCP"
      run: |
        Install-Module -Name Posh-SSH -force
        $keystring = "${{ secrets.SSH_KEY }}"
        $computer = "${{ secrets.SCP_SERVER }}"
        $username = "${{ secrets.USER }}"
        $password = "hunter2" | ConvertTo-SecureString -AsPlainText -Force
        $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username, $password
        
        #if wildcards / custom paths are needed to be created, this is an example
        #create remote dir
        #this errors if already exists
        #but there is a way to test this beforehand -> Test-SFTPPath
        #New-SFTPSession -ComputerName $computer -Credential $credential -KeyString $keystring -AcceptKey -Verbose
        #New-SFTPItem -SessionId 0 -Path /tmp/${{github.event.inputs.tag}} -ItemType Directory
        #New-SFTPItem -SessionId 0 -Path /tmp/${{github.event.inputs.tag}}/gui -ItemType Directory
        #New-SFTPItem -SessionId 0 -Path /tmp/${{github.event.inputs.tag}}/gui/packaged -ItemType Directory
        
        #push file
        Set-SCPItem -ComputerName $computer -KeyString $keystring -AcceptKey -Credential $credential -Path  .\uploadme\* -Destination ${{ github.event.inputs.remotedir }} -Verbose
  
  packageLinux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download docker-linux-static from Monero-GUI build.yml
      uses: dawidd6/action-download-artifact@v2.21.1
      with:
        workflow: build.yml
        workflow_conclusion: success
        run_id: ${{ github.event.inputs.guifile }}
        repo: monero-project/monero-gui
        name: docker-linux-static

    - name: "Download + Extract CLI Files / PDF guide"
      run: |
          TAG=${{ github.event.inputs.tag }}

          wget -q "https://gui.xmr.pm/files/cli/${TAG}/monero-linux-x64-${TAG}.tar.bz2"
          wget -q "https://github.com/monero-ecosystem/monero-GUI-guide/releases/download/v1.9/monero-gui-wallet-guide.pdf"
    - name: "Create appimage file"
      run: |
          #create appimage
          cat <<EOF >> monero-wallet-gui.AppImage
          ./monero-wallet-gui
          EOF
          
          chmod -R 755 monero-wallet-gui.AppImage
          chmod -R 755 monero-wallet-gui
          
    - name: "Extract CLI files"
      run: |
          TAG=${{ github.event.inputs.tag }}
          tar -xvf "monero-linux-x64-${TAG}.tar.bz2"

    - name: "Prepare / move files for packaging"
      run: |
          TAG=${{ github.event.inputs.tag }}
          mkdir -p monero-gui-${TAG}/extras
          HEAD=monero-x86_64-linux-gnu-
          mv ${HEAD}${TAG}/LICENSE monero-gui-${TAG}/.
          mv ${HEAD}${TAG}/monerod monero-gui-${TAG}/.

          rm ${HEAD}${TAG}/README.md
          rm ${HEAD}${TAG}/ANONYMITY_NETWORKS.md

          cp monero-gui-wallet-guide.pdf monero-gui-${TAG}/.
          cp monero-wallet-gui monero-gui-${TAG}/.
          cp monero-wallet-gui.AppImage monero-gui-${TAG}/.

          chmod -R 644 monero-gui-${TAG}/monero-gui-wallet-guide.pdf 
          chmod -R 644 monero-gui-${TAG}/LICENSE
          
          ls -la 
          echo "BEFORE CHMOD"
          for filename in ${HEAD}${TAG}/*; do
            chmod -R 755 ${filename} 
            mv ${filename} monero-gui-${TAG}/extras/. 
          done

          mkdir dummy
          sudo mv monero-gui-${TAG} dummy/
          
          mkdir uploadme
          cd dummy
          tar -cvjSf monero-gui-linux-x64-${TAG}.tar.bz2 monero-gui-${TAG}
          cp monero-gui-linux-x64-${TAG}.tar.bz2 ../uploadme/.
          cd ..
          
          ls uploadme/*
          
          echo "${{ secrets.SSH_KEY }}" | tee ssh_key
          sudo chmod 600 ssh_key
          #if scp remote-host:~/myfile ./ >&/dev/null ; then echo "transfer OK" ; else echo "transfer failed" ; fi
          
    - name: "Upload monero-gui-linux-x64-${{ github.event.inputs.tag }}.tar.bz2"
      run: scp -r -i ./ssh_key -o StrictHostKeyChecking=no "./uploadme/*" ${{ secrets.USER }}@${{ secrets.SCP_SERVER }}:${{ github.event.inputs.remotedir }}
